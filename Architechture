Functional Overview:
The software will accept control inputs in the form of a sequence file or manual keypresses. 
Using the inverse kinematics of the platform, the software will convert the desired positions of the platform into the corresponding lengths of the actuators.
Based on these lenghts, the required movements will be executed on the servo motors via PWM control. 
The motor control software will account for the dynamics of the crack-slider linkage used to move the syringes.
At the end of each move, the system will output the expected state of the platform as well as the commanded lenghts of each arm for debug purposes.

The code will be split into 4 modules:
1.The sequence file generator and reader
2.The kinematics controller  
3.The servo interface
4.User interface

1.The sequence file reader (Could be a separate script if we want to do it in python. It doesn't need to run in real time on the arduino)
    Input: Sequence file a CSV which contains a series of position vectors (x,y,z,theta,psi,phi) which denote the position of the upper platform with respect to the base's coordinate system. These are sequenced with a time step (might not need this)
    Implement inverse kinematics: Use the positions to define a transformation matrix and then transform the positions of each attachment point to the base coordinate system. Leg lengths are just the magnitude of the vector ||(x-x0,y-y0,z-z0)||
    Output: a sequence of leg length vectors [L0,L1,L2,L3,L4,L5]
    -To solve the maze, we would need to manually write the sequence of moves needed

2.Kinematics controller is what transforms the leg lenghts into the servo positions. It will run real-time on the arduino
    Input: Leg lengths vector
    Takes leg length and computes the required position of the servos based on the slider-crank linkage mechanics.
    Output: Runs in the main loop and calls the servo interface function with a MotorAngles vector. 


3.Servo interface
    Sends PWM signals to the servos
    Input: Called by kin. controller with MotorAngles
    Based on the sample code provided, needs to consider the maximum rotation of each servo.
    Output: PWM signals for each servo position


4.User interface: (Should probably be a class)
    Handles input functions like running the solve, resetting the platform to origin, and manual position commands eg.(theta=30)
    Handles logging via the serial interface for all debug stuff like state callouts
    Handles error catching and logging

Needs to be decided:
-Are we hardcoding the sequences into the arduino?
-Should the sequence file reader be separate, arduinos are crap at reading CSVs.